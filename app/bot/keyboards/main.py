from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from typing import List, Optional


def main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """Main menu keyboard"""
    builder = ReplyKeyboardBuilder()
    
    # User menu items
    builder.row(
        KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="üí¨ –û–±—â–µ–Ω–∏–µ")
    )
    builder.row(
        KeyboardButton(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")
    )
    
    # Admin menu items
    if is_admin:
        builder.row(
            KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        )
    
    return builder.as_markup(resize_keyboard=True)


def communication_menu_keyboard() -> ReplyKeyboardMarkup:
    """Communication menu keyboard"""
    builder = ReplyKeyboardBuilder()
    
    builder.row(
        KeyboardButton(text="üë• –î—Ä—É–∑—å—è"),
        KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π")
    )
    builder.row(
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    )
    
    return builder.as_markup(resize_keyboard=True)


def events_menu_keyboard() -> ReplyKeyboardMarkup:
    """Events menu keyboard"""
    builder = ReplyKeyboardBuilder()
    
    builder.row(
        KeyboardButton(text="üë• –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥—Ä—É–∑–µ–π"),
        KeyboardButton(text="üìù –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    )
    builder.row(
        KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    )
    builder.row(
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    )
    
    return builder.as_markup(resize_keyboard=True)


def admin_menu_keyboard() -> ReplyKeyboardMarkup:
    """Admin menu keyboard"""
    builder = ReplyKeyboardBuilder()
    
    builder.row(
        KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
        KeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    )
    builder.row(
        KeyboardButton(text="üìà –û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º")
    )
    builder.row(
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    )
    
    return builder.as_markup(resize_keyboard=True)


def gender_keyboard() -> InlineKeyboardMarkup:
    """Gender selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender:male"),
        InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female")
    )
    builder.row(
        InlineKeyboardButton(text="ü§∑ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="gender:skip")
    )
    
    return builder.as_markup()


def regions_keyboard(regions: List[tuple]) -> InlineKeyboardMarkup:
    """Regions selection keyboard"""
    builder = InlineKeyboardBuilder()
    
    for region_id, region_name in regions:
        builder.row(
            InlineKeyboardButton(
                text=region_name, 
                callback_data=f"region:{region_id}"
            )
        )
    
    return builder.as_markup()


def interests_keyboard(interests: List[tuple], selected: List[int] = None) -> InlineKeyboardMarkup:
    """Interests selection keyboard"""
    if selected is None:
        selected = []
    
    builder = InlineKeyboardBuilder()
    
    for interest_id, interest_name in interests:
        text = f"‚úÖ {interest_name}" if interest_id in selected else interest_name
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"interest:{interest_id}"
            )
        )
    
    if selected:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data="interests:done"
            )
        )
    
    return builder.as_markup()


def back_keyboard() -> ReplyKeyboardMarkup:
    """Simple back keyboard"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )


def skip_keyboard() -> InlineKeyboardMarkup:
    """Skip button keyboard"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
        ]
    )


def confirm_keyboard() -> InlineKeyboardMarkup:
    """Confirm/Cancel keyboard"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm:yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm:no")
            ]
        ]
    )


def event_actions_keyboard(event_id: int, is_participant: bool = False, is_creator: bool = False) -> InlineKeyboardMarkup:
    """Event actions keyboard"""
    builder = InlineKeyboardBuilder()
    
    if not is_creator:
        if is_participant:
            builder.row(
                InlineKeyboardButton(
                    text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                    callback_data=f"event_leave:{event_id}"
                )
            )
        else:
            builder.row(
                InlineKeyboardButton(
                    text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
                    callback_data=f"event_join:{event_id}"
                )
            )
    
    builder.row(
        InlineKeyboardButton(
            text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
            callback_data=f"event_map:{event_id}"
        )
    )
    
    if is_creator:
        builder.row(
            InlineKeyboardButton(
                text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
                callback_data=f"event_participants:{event_id}"
            )
        )
    
    return builder.as_markup()
