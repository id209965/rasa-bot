from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.keyboards.main import main_menu_keyboard
from app.bot.states.registration import RegistrationStates
from app.database.models import User

router = Router()


@router.message(CommandStart())
async def start_command(
    message: Message, 
    session: AsyncSession,
    user: User,
    is_registered: bool,
    is_admin: bool,
    state: FSMContext
):
    """Handle /start command"""
    await state.clear()
    
    if is_registered:
        # User is already registered, show main menu
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard(is_admin)
        )
    else:
        # New user, start registration
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç <b>–¢–µ—Å—Ç</b>! üéâ\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n\n"
            "üìû <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )
        
        # Set registration state
        await state.set_state(RegistrationStates.phone)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(
    message: Message,
    user: User,
    is_registered: bool,
    is_admin: bool,
    state: FSMContext
):
    """Back to main menu"""
    await state.clear()
    
    if is_registered:
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard(is_admin)
        )
    else:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
            "üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )
        await state.set_state(RegistrationStates.phone)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message, is_registered: bool):
    """Show help message"""
    
    if not is_registered:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
        return
    
    help_text = """
ü§ñ <b>–ß–∞—Ç-–±–æ—Ç –¢–µ—Å—Ç - –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>

üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

üí¨ <b>–û–±—â–µ–Ω–∏–µ</b>
‚Ä¢ –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ —á–∞—Ç—ã —Å –Ω–∏–º–∏
‚Ä¢ –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

üéâ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥—Ä—É–∑–µ–π
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ

üîÑ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥"
    """
    
    await message.answer(help_text)
