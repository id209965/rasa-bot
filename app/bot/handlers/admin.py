from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.keyboards.main import admin_menu_keyboard, back_keyboard
from app.database.models import User

router = Router()


@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(
    message: Message,
    session: AsyncSession,
    is_registered: bool,
    is_admin: bool,
    state: FSMContext
):
    """Show admin panel"""
    await state.clear()
    
    if not is_registered:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
        return
    
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_menu_keyboard()
    )


@router.message(F.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def upload_data(
    message: Message,
    session: AsyncSession,
    is_admin: bool
):
    """Upload data prompt"""
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
        return
    
    await message.answer(
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–ø—Ä–∏—à–ª–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö.\n\n"
        "üìù –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:\n"
        "‚Ä¢ 'regions' - —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤\n"
        "‚Ä¢ 'interests' - —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤",
        reply_markup=back_keyboard()
    )


@router.message(F.text == "üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def export_users(
    message: Message,
    session: AsyncSession,
    is_admin: bool
):
    """Export users report"""
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
        return
    
    # TODO: Implement users export
    await message.answer(
        "üìä <b>–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=back_keyboard()
    )


@router.message(F.text == "üìà –û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º")
async def export_events(
    message: Message,
    session: AsyncSession,
    is_admin: bool
):
    """Export events report"""
    if not is_admin:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
        return
    
    # TODO: Implement events export
    await message.answer(
        "üìà <b>–û—Ç—á–µ—Ç –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º</b>\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=back_keyboard()
    )
