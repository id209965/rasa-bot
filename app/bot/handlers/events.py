from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.keyboards.main import events_menu_keyboard, back_keyboard
from app.database.models import User

router = Router()


@router.message(F.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def events_menu(
    message: Message,
    session: AsyncSession,
    is_registered: bool,
    state: FSMContext
):
    """Show events menu"""
    await state.clear()
    
    if not is_registered:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
        return
    
    await message.answer(
        "üéâ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=events_menu_keyboard()
    )


@router.message(F.text == "üë• –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥—Ä—É–∑–µ–π")
async def friends_events(
    message: Message,
    session: AsyncSession,
    user: User,
    is_registered: bool
):
    """Show friends' events"""
    if not is_registered:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
        return
    
    # TODO: Implement friends events fetching
    await message.answer(
        "üë• <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥—Ä—É–∑–µ–π</b>\n\n"
        "üìã –ü–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ—Ç –¥—Ä—É–∑–µ–π.\n\n"
        "üë• –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é '–û–±—â–µ–Ω–∏–µ'!",
        reply_markup=back_keyboard()
    )


@router.message(F.text == "üìù –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def my_events(
    message: Message,
    session: AsyncSession,
    user: User,
    is_registered: bool
):
    """Show user's events"""
    if not is_registered:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
        return
    
    # TODO: Implement user events fetching
    await message.answer(
        "üìù <b>–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
        "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n"
        "‚ûï –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
        reply_markup=back_keyboard()
    )


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def create_event(
    message: Message,
    session: AsyncSession,
    user: User,
    is_registered: bool
):
    """Start event creation"""
    if not is_registered:
        await message.answer(
            "üî• –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
        return
    
    # TODO: Implement event creation
    await message.answer(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=back_keyboard()
    )
